{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOsdtvImrH8USTrr0sOEA87",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sathwikreddykatla/tutorial/blob/master/RNN%20NOMA\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers, optimizers, losses, models\n",
        "from scipy.stats import levy_stable\n",
        "\n",
        "epsilon = 0.01  # CSI error variance\n",
        "EbNodB = list(np.linspace(0, 15, 6))\n",
        "num_bits_train = 200\n",
        "num_bits_test = 200000\n",
        "noise_type = 'awgn'  # t-dist, stable-dist, awgn, radar\n",
        "\n",
        "vv = 5  # t-distribution scale\n",
        "radar_prob = 0.05\n",
        "radar_power_factor = 4\n",
        "alpha, beta = 1.8, -0.5\n",
        "\n",
        "# Hyperparameters\n",
        "snr_train_db = 6\n",
        "learning_rate = 0.001\n",
        "batch_size = 50\n",
        "epochs = 1000\n",
        "act_func = tf.nn.relu\n",
        "\n",
        "c1 = np.sqrt(16)  # power allocation factor\n",
        "c2 = np.sqrt(4)  # power allocation factor\n",
        "h = 1\n",
        "\n",
        "# Build model\n",
        "def build_decoder(input_shape, units):\n",
        "    model = models.Sequential([\n",
        "        layers.InputLayer(input_shape=input_shape),\n",
        "        layers.Dense(units[0], activation=act_func),\n",
        "        layers.Dense(units[1], activation=act_func),\n",
        "        layers.Dense(1, activation=tf.nn.sigmoid)\n",
        "    ])\n",
        "    return model\n",
        "\n",
        "# Adjust input shapes for concatenated inputs\n",
        "decoder1 = build_decoder((1,), [16, 8])\n",
        "decoder2 = build_decoder((2,), [24, 12])  # Input is concatenation of y and p1, so it expects 2 dimensions\n",
        "decoder3 = build_decoder((3,), [32, 16])  # Input is concatenation of y, p1, and p2, so it expects 3 dimensions\n",
        "\n",
        "# Optimizer and loss\n",
        "loss_fn = losses.MeanSquaredError()\n",
        "optimizer = optimizers.Adam(learning_rate)\n",
        "\n",
        "# Data generation function\n",
        "def generate_data(num_bits, noise_std, h):\n",
        "    bits1 = np.random.binomial(n=1, p=0.5, size=num_bits)\n",
        "    bits2 = np.random.binomial(n=1, p=0.5, size=num_bits)\n",
        "    bits3 = np.random.binomial(n=1, p=0.5, size=num_bits)\n",
        "\n",
        "    x1 = 2 * bits1 - 1\n",
        "    x2 = 2 * bits2 - 1\n",
        "    x3 = 2 * bits3 - 1\n",
        "    x = x3 + c2 * x2 + c1 * x1\n",
        "\n",
        "    if noise_type == 'awgn':\n",
        "        noise = noise_std * np.random.normal(0, 1, x.shape)\n",
        "    elif noise_type == 't-dist':\n",
        "        noise = noise_std * np.sqrt((vv - 2) / vv) * np.random.standard_t(vv, size=x.shape)\n",
        "    elif noise_type == 'radar':\n",
        "        add_pos = np.random.choice([0.0, 1.0], x.shape, p=[1 - radar_prob, radar_prob])\n",
        "        corrupted_signal = radar_power_factor * np.random.standard_normal(size=x.shape) * add_pos\n",
        "        noise = noise_std * (np.random.normal(0, 1, x.shape) + corrupted_signal)\n",
        "    elif noise_type == 'stable-dist':\n",
        "        noise = noise_std * levy_stable.rvs(alpha, beta, size=x.shape)\n",
        "\n",
        "    y = h * x + noise\n",
        "    y_ = np.reshape(y, (len(y), 1))\n",
        "    s1_ = np.reshape(bits1, (len(y), 1))\n",
        "    s2_ = np.reshape(bits2, (len(y), 1))\n",
        "    s3_ = np.reshape(bits3, (len(y), 1))\n",
        "    return y_, s1_, s2_, s3_, bits3\n",
        "\n",
        "def fetch_batch(epoch, batch_index, batch_size, y_, s1_, s2_, s3_):\n",
        "    train_size = len(y_)\n",
        "    np.random.seed(epoch * (train_size // batch_size) + batch_index)\n",
        "    indices = np.random.randint(train_size, size=batch_size)\n",
        "    return y_[indices], s1_[indices], s2_[indices], s3_[indices]\n",
        "\n",
        "# Training loop\n",
        "# Training loop\n",
        "for epoch in range(epochs):\n",
        "    y_, s1_, s2_, s3_, _ = generate_data(num_bits_train, np.sqrt(1 / (10 ** (snr_train_db / 10.0))), h)\n",
        "\n",
        "    for batch_index in range(len(y_) // batch_size):\n",
        "        _y, _s1, _s2, _s3 = fetch_batch(epoch, batch_index, batch_size, y_, s1_, s2_, s3_)\n",
        "\n",
        "        with tf.GradientTape() as tape:\n",
        "            # Forward pass through decoder1\n",
        "            p1 = decoder1(_y, training=True)\n",
        "\n",
        "            # Concatenate y and p1, then pass through decoder2\n",
        "            z2 = tf.concat([_y, p1], axis=-1)\n",
        "            z2 = tf.reshape(z2, [batch_size, 2])\n",
        "            p2 = decoder2(z2, training=True)\n",
        "\n",
        "            # Concatenate z2 and p2, then pass through decoder3\n",
        "            z3 = tf.concat([z2, p2], axis=-1)\n",
        "            z3 = tf.reshape(z3, [batch_size, 3])\n",
        "            p3 = decoder3(z3, training=True)\n",
        "\n",
        "            # Compute the loss (ensure that the loss is computed using model outputs)\n",
        "            loss1 = loss_fn(_s1, p1)\n",
        "            loss2 = loss_fn(_s2, p2)\n",
        "            loss3 = loss_fn(_s3, p3)\n",
        "            loss = loss1 + loss2 + loss3\n",
        "\n",
        "        # Get gradients\n",
        "        grads = tape.gradient(loss, decoder1.trainable_weights + decoder2.trainable_weights + decoder3.trainable_weights)\n",
        "\n",
        "        # Ensure gradients are computed correctly\n",
        "        if None in grads:\n",
        "            print(f\"None found in gradients for epoch {epoch}, batch {batch_index}\")\n",
        "        else:\n",
        "            # Apply gradients\n",
        "            optimizer.apply_gradients(zip(grads, decoder1.trainable_weights + decoder2.trainable_weights + decoder3.trainable_weights))\n",
        "\n",
        "    if epoch % 10 == 0:\n",
        "        print(f'Epoch {epoch}: Loss = {loss.numpy()}')\n",
        "\n",
        "# Testing and evaluation loop\n",
        "def recover_bits(y_, decoder1, decoder2, decoder3):\n",
        "    # First pass through decoder1\n",
        "    p1 = decoder1(y_, training=False)\n",
        "\n",
        "    # Concatenate y and p1, then pass through decoder2\n",
        "    z2 = tf.concat([y_, p1], axis=-1)\n",
        "    z2 = tf.reshape(z2, [len(y_), 2])  # Ensure the shape is correct\n",
        "    p2 = decoder2(z2, training=False)\n",
        "\n",
        "    # Concatenate z2 and p2, then pass through decoder3\n",
        "    z3 = tf.concat([z2, p2], axis=-1)\n",
        "    z3 = tf.reshape(z3, [len(y_), 3])  # Ensure the shape is correct\n",
        "    p3 = decoder3(z3, training=False)\n",
        "\n",
        "    # Convert the predictions to binary bits\n",
        "    s_est = tf.reshape(p3, (len(p3),))\n",
        "    s_re = tf.sign(s_est - 0.5)\n",
        "    bits_re = ((s_re + 1) / 2).numpy().astype(int)\n",
        "\n",
        "    return bits_re\n",
        "\n",
        "ber_uncoded = [None] * len(EbNodB)\n",
        "\n",
        "for ii in range(len(EbNodB)):\n",
        "    EbNo = 10 ** (EbNodB[ii] / 10.0)\n",
        "    noise_std = np.sqrt(1 / EbNo)\n",
        "    y_, _, _, _, bits3 = generate_data(num_bits_test, noise_std, h)\n",
        "    # Modify the call to recover_bits in your test loop\n",
        "    bits_re3 = recover_bits(y_, decoder1, decoder2, decoder3)\n",
        "    num_errors_uncoded = sum(bits_re3 != bits3)\n",
        "    ber_uncoded[ii] = num_errors_uncoded / num_bits_test\n",
        "\n",
        "print('Uncoded BER:', np.round(ber_uncoded, 6))\n",
        "\n",
        "# Plot BER\n",
        "plt.plot(EbNodB, ber_uncoded, '-bo', label='Uncoded bits')\n",
        "plt.yscale('log')\n",
        "plt.xlabel('EbNo (dB)')\n",
        "plt.ylabel('BER')\n",
        "plt.title(f'NOMA 3 users under channel, noise type: {noise_type}')\n",
        "plt.grid()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "3i4u3TP554Us",
        "outputId": "675ec47d-415c-4598-edec-c0f7c07368d0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 0: Loss = 1.0138201713562012\n",
            "Epoch 10: Loss = 0.588892936706543\n",
            "Epoch 20: Loss = 0.5240047574043274\n",
            "Epoch 30: Loss = 0.446666419506073\n",
            "Epoch 40: Loss = 0.3871018886566162\n",
            "Epoch 50: Loss = 0.33288443088531494\n",
            "Epoch 60: Loss = 0.343283474445343\n",
            "Epoch 70: Loss = 0.28152185678482056\n",
            "Epoch 80: Loss = 0.2872316241264343\n",
            "Epoch 90: Loss = 0.2740277051925659\n",
            "Epoch 100: Loss = 0.3003745377063751\n",
            "Epoch 110: Loss = 0.2045501470565796\n",
            "Epoch 120: Loss = 0.2338116466999054\n",
            "Epoch 130: Loss = 0.23508088290691376\n",
            "Epoch 140: Loss = 0.19873449206352234\n",
            "Epoch 150: Loss = 0.21677565574645996\n",
            "Epoch 160: Loss = 0.17418983578681946\n",
            "Epoch 170: Loss = 0.18680235743522644\n",
            "Epoch 180: Loss = 0.11396276950836182\n",
            "Epoch 190: Loss = 0.18540704250335693\n",
            "Epoch 200: Loss = 0.22445696592330933\n",
            "Epoch 210: Loss = 0.147759810090065\n",
            "Epoch 220: Loss = 0.13000430166721344\n",
            "Epoch 230: Loss = 0.17245762050151825\n",
            "Epoch 240: Loss = 0.17825372517108917\n",
            "Epoch 250: Loss = 0.12394130975008011\n",
            "Epoch 260: Loss = 0.15431815385818481\n",
            "Epoch 270: Loss = 0.13070639967918396\n",
            "Epoch 280: Loss = 0.1563158482313156\n",
            "Epoch 290: Loss = 0.08680818229913712\n",
            "Epoch 300: Loss = 0.146676167845726\n",
            "Epoch 310: Loss = 0.08965864777565002\n",
            "Epoch 320: Loss = 0.11225461959838867\n",
            "Epoch 330: Loss = 0.10781996697187424\n",
            "Epoch 340: Loss = 0.11729974299669266\n",
            "Epoch 350: Loss = 0.12722176313400269\n",
            "Epoch 360: Loss = 0.05581621080636978\n",
            "Epoch 370: Loss = 0.08157209306955338\n",
            "Epoch 380: Loss = 0.08043144643306732\n",
            "Epoch 390: Loss = 0.12501055002212524\n",
            "Epoch 400: Loss = 0.06050451099872589\n",
            "Epoch 410: Loss = 0.051243167370557785\n",
            "Epoch 420: Loss = 0.120486781001091\n",
            "Epoch 430: Loss = 0.058057934045791626\n",
            "Epoch 440: Loss = 0.04211055859923363\n",
            "Epoch 450: Loss = 0.07482226192951202\n",
            "Epoch 460: Loss = 0.06049436330795288\n",
            "Epoch 470: Loss = 0.12958337366580963\n",
            "Epoch 480: Loss = 0.07130584120750427\n",
            "Epoch 490: Loss = 0.0773366242647171\n",
            "Epoch 500: Loss = 0.04695113003253937\n",
            "Epoch 510: Loss = 0.04244695603847504\n",
            "Epoch 520: Loss = 0.03139098733663559\n",
            "Epoch 530: Loss = 0.09706290066242218\n",
            "Epoch 540: Loss = 0.060096897184848785\n",
            "Epoch 550: Loss = 0.023735975846648216\n",
            "Epoch 560: Loss = 0.05337302014231682\n",
            "Epoch 570: Loss = 0.04687933623790741\n",
            "Epoch 580: Loss = 0.06525424122810364\n",
            "Epoch 590: Loss = 0.16807112097740173\n",
            "Epoch 600: Loss = 0.0410817451775074\n",
            "Epoch 610: Loss = 0.04266539588570595\n",
            "Epoch 620: Loss = 0.05255883187055588\n",
            "Epoch 630: Loss = 0.0892520621418953\n",
            "Epoch 640: Loss = 0.047812215983867645\n",
            "Epoch 650: Loss = 0.09029154479503632\n",
            "Epoch 660: Loss = 0.04322859272360802\n",
            "Epoch 670: Loss = 0.049651384353637695\n",
            "Epoch 680: Loss = 0.056349653750658035\n",
            "Epoch 690: Loss = 0.05297210440039635\n",
            "Epoch 700: Loss = 0.12929359078407288\n",
            "Epoch 710: Loss = 0.08494165539741516\n",
            "Epoch 720: Loss = 0.022785132750868797\n",
            "Epoch 730: Loss = 0.058804046362638474\n",
            "Epoch 740: Loss = 0.07565079629421234\n",
            "Epoch 750: Loss = 0.08172176778316498\n",
            "Epoch 760: Loss = 0.0832587480545044\n",
            "Epoch 770: Loss = 0.06355547159910202\n",
            "Epoch 780: Loss = 0.025415591895580292\n",
            "Epoch 790: Loss = 0.05295698344707489\n",
            "Epoch 800: Loss = 0.017396852374076843\n",
            "Epoch 810: Loss = 0.03478114306926727\n",
            "Epoch 820: Loss = 0.04497871920466423\n",
            "Epoch 830: Loss = 0.09128216654062271\n",
            "Epoch 840: Loss = 0.05471131578087807\n",
            "Epoch 850: Loss = 0.04778226092457771\n",
            "Epoch 860: Loss = 0.037773698568344116\n",
            "Epoch 870: Loss = 0.11263478547334671\n",
            "Epoch 880: Loss = 0.08122880756855011\n",
            "Epoch 890: Loss = 0.03712831437587738\n",
            "Epoch 900: Loss = 0.09599893540143967\n",
            "Epoch 910: Loss = 0.018167804926633835\n",
            "Epoch 920: Loss = 0.10194402933120728\n",
            "Epoch 930: Loss = 0.06866742670536041\n",
            "Epoch 940: Loss = 0.049432769417762756\n",
            "Epoch 950: Loss = 0.059580810368061066\n",
            "Epoch 960: Loss = 0.07459267973899841\n",
            "Epoch 970: Loss = 0.08126095682382584\n",
            "Epoch 980: Loss = 0.16150380671024323\n",
            "Epoch 990: Loss = 0.06129451468586922\n",
            "Uncoded BER: [2.7647e-01 1.4350e-01 4.6135e-02 6.2600e-03 2.0000e-04 0.0000e+00]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}